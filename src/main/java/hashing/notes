Hashing is the solution that can be used in almost all such situations and performs extremely well compared
to above data structures like Array, Linked List, Balanced BST in practice.
With hashing we get O(1) search time on average (under reasonable assumptions) and O(n) in worst case.

The idea of the hash function that converts a given big number/string to small number that can be used as the index to Hash table

Hash Function: A function that converts a given big phone number to a small practical integer value.
The mapped integer value is used as an index in hash table.
In simple terms, a hash function maps a big number or string to a small integer that can be used as index in hash table.

A good hash function should have following properties
  1) Efficiently computable.
  2) Should uniformly distribute the keys (Each table position equally likely for each key)

Collision Handling:
Since a hash function gets us a small number for a big key, there is possibility that two keys result in same value

The situation where a newly inserted key maps to an already occupied slot in hash table is called collision
and must be handled using some collision handling technique

Following are the ways to handle collisions:
Chaining:The idea is to make each cell of hash table point to a linked list of records that have same hash function value.
 Chaining is simple, but requires additional memory outside the table.

Open Addressing: In open addressing, all elements are stored in the hash table itself.
Each table entry contains either a record or NIL.
When searching for an element, we one by one examine table slots until the desired element is found or it is clear
that the element is not in the table.
================================================================================================================
A hash function takes data (like a string, or a file’s contents) and outputs a hash, a fixed-size string or number.

For example, here’s the MD5 hash (MD5 is a common hash function) for a file simply containing “cake”:
DF7CE038E2FA96EDF39206F898DF134D
And here’s the hash for the same file after it was edited to be “cakes”:
0E9091167610558FDAE6F69BD6716771

Notice the hash is completely different, even though the files were similar.
Here's the hash for a long film I have on my hard drive:
664f67364296d08f31aec6fea4e9b83f

We can think of a hash as a "fingerprint"
We can trust that a given file will always have the same hash, but we can't go from the hash back to the original file.
Sometimes we have to worry about multiple files having the same hash value, which is called a hash collision.

A Hash table origanizes data so that you can quickly look up values for a given key

Strengths:
Fast lookups. Lookups take O(1)O(1) time on average.
Flexible keys. Most data types can be used for keys, as long as they're hashable.

Weakness:
Slow worst-case lookups
Unordered.
Single-directional lookups.
Not cache-friendly

Hash maps are built on arrays
Think of a hash map as a "hack" on top of an array to let us use flexible keys instead of being stuck
with sequential integer "indices."

All we need is a function to convert a key into an array index (an integer). That function is called a hashing function.




